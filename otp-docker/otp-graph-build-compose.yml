version: '3.8'
services:
  download-bundle:
    image: amazon/aws-cli
    command: "s3 cp ${S3_URI} /var/opentripplanner/ --recursive"
    volumes:
      - type: bind
        source: ./otp
        target: /var/opentripplanner
  #      - type: bind
  #        source: ~/.aws
  #        target: /root/.aws
  mark-status-json-as-complete:
    image: alpine
    command: /bin/sh -c "apk add jq && touch /etc/caddy/static/status-new.json && jq '.serverStarted = \"true\"' /etc/caddy/static/status.json > /etc/caddy/static/status-new.json && rm /etc/caddy/static/status.json && mv /etc/caddy/static/status-new.json /etc/caddy/static/status.json"
    depends_on:
      upload-bundle:
        condition: service_healthy
    volumes:
      - type: bind
        source: ./caddy
        target: /etc/caddy/
  add-status-json-nonce:
    image: alpine
    command: /bin/sh -e "mv /var/opentripplanner/otp-runner-graph-build-manifest.json /var/opentripplanner/otp-runner-server-only-manifest.json && /add-nonce.sh"
    depends_on:
      download-bundle:
        condition: service_completed_successfully
    volumes:
      - type: bind
        source: ./otp
        target: /var/opentripplanner/
      - type: bind
        source: ./caddy
        target: /etc/caddy/
      - type: bind
        source: ./add-nonce.sh
        target: /add-nonce.sh
  otp-build:
    depends_on:
      add-status-json-nonce:
        condition: service_completed_successfully
        # TO do it dynamically: https://stackoverflow.com/a/50201232
    image: opentripplanner/opentripplanner:latest
    ports:
      - "8080:8080"
    command: "--build --save"
    restart: no
    volumes:
      - type: bind
        source: ./otp
        target: /var/opentripplanner
  upload-bundle:
    depends_on:
      otp-build:
        condition: service_completed_successfully
    image: amazon/aws-cli
    command: "s3 cp /var/opentripplanner/graph.obj ${S3_URI}/graph.obj"
    volumes:
      - type: bind
        source: ./otp
        target: /var/opentripplanner
  caddy:
    image: caddy:latest
    restart: unless-stopped
    volumes:
      - type: bind
        source: ./caddy
        target: /etc/caddy/
    ports:
      - "80:80"
      - "443:443"